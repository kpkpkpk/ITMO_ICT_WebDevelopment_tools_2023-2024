{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u043e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u041b\u0420 \u041f\u043e\u043d\u043e\u043c\u0430\u0440\u0435\u0432 \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d \u041a33402 (\u041a34402)","text":""},{"location":"lr1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1","text":""},{"location":"lr1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":""},{"location":"lr1/#_2","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u043c\u0438. \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0431\u044e\u0434\u0436\u0435\u0442\u044b \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u044b \u043e \u0441\u0432\u043e\u0438\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u0430\u0445. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0440\u0430\u0442 \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0446\u0435\u043b\u0435\u0439 \u043d\u0430 \u0431\u0443\u0434\u0443\u0449\u0435\u0435.</p>"},{"location":"lr1/#_3","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<p><code>db.py</code></p> <pre><code>from sqlmodel import SQLModel, Session, create_engine\n\ndb_url = 'postgresql://postgres:postgres@localhost/lab_db'\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_db():\n    with Session(engine) as session:\n        yield session\n</code></pre> <p><code>main.py</code></p> <pre><code>\nfrom fastapi import FastAPI, Depends, HTTPException\n\nfrom models import *\nfrom db import *\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n\n@app.get(\"/user/{user_id}\", response_model=User)\ndef get_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n\n@app.get(\"/users\", response_model=List[User])\ndef get_users(db: Session = Depends(get_db)):\n    return db.query(User).all()\n\n\n@app.post(\"/user\")\ndef create_user(user: UserBase, db: Session = Depends(get_db)):\n    db_user = User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\n@app.delete(\"/user/{user_id}\")\ndef delete_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    db.delete(db_user)\n    db.commit()\n    return {\"message\": \"User deleted successfully\"}\n\n\n@app.patch(\"/user/{user_id}\")\ndef update_user(user_id: int, user: UserBase, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if not db_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    for attr, value in user.dict().items():\n        setattr(db_user, attr, value)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\n# Endpoints for Budget\n@app.get(\"/budget/{budget_id}\", response_model=Budget)\ndef get_budget(budget_id: int, db: Session = Depends(get_db)):\n    db_budget = db.query(Budget).filter(Budget.id == budget_id).first()\n    if not db_budget:\n        raise HTTPException(status_code=404, detail=\"Budget not found\")\n    return db_budget\n\n\n@app.get(\"/budgets\", response_model=List[Budget])\ndef get_budgets(db: Session = Depends(get_db)):\n    return db.query(Budget).all()\n\n\n@app.post(\"/budget\")\ndef create_budget(budget: BudgetBase, db: Session = Depends(get_db)):\n    db_budget = Budget(**budget.dict())\n    db.add(db_budget)\n    db.commit()\n    db.refresh(db_budget)\n    return db_budget\n\n\n@app.delete(\"/budget/{budget_id}\")\ndef delete_budget(budget_id: int, db: Session = Depends(get_db)):\n    db_budget = db.query(Budget).filter(Budget.id == budget_id).first()\n    if not db_budget:\n        raise HTTPException(status_code=404, detail=\"Budget not found\")\n    db.delete(db_budget)\n    db.commit()\n    return {\"message\": \"Budget deleted successfully\"}\n\n\n@app.patch(\"/budget/{budget_id}\")\ndef update_budget(budget_id: int, budget: BudgetBase, db: Session = Depends(get_db)):\n    db_budget = db.query(Budget).filter(Budget.id == budget_id).first()\n    if not db_budget:\n        raise HTTPException(status_code=404, detail=\"Budget not found\")\n    for attr, value in budget.dict().items():\n        setattr(db_budget, attr, value)\n    db.commit()\n    db.refresh(db_budget)\n    return db_budget\n\n\n# Endpoints for Category CRUD operations\n@app.get(\"/category/{category_id}\", response_model=Category)\ndef get_category(category_id: int, db: Session = Depends(get_db)):\n    db_category = db.query(Category).filter(Category.id == category_id).first()\n    if not db_category:\n        raise HTTPException(status_code=404, detail=\"Category not found\")\n    return db_category\n\n\n@app.get(\"/categories\", response_model=List[Category])\ndef get_categories(db: Session = Depends(get_db)):\n    return db.query(Category).all()\n\n\n@app.post(\"/category\")\ndef create_category(category: CategoryBase, db: Session = Depends(get_db)):\n    db_category = Category(**category.dict())\n    db.add(db_category)\n    db.commit()\n    db.refresh(db_category)\n    return db_category\n\n\n@app.delete(\"/category/{category_id}\")\ndef delete_category(category_id: int, db: Session = Depends(get_db)):\n    db_category = db.query(Category).filter(Category.id == category_id).first()\n    if not db_category:\n        raise HTTPException(status_code=404, detail=\"Category not found\")\n    db.delete(db_category)\n    db.commit()\n    return {\"message\": \"Category deleted successfully\"}\n\n\n@app.patch(\"/category/{category_id}\")\ndef update_category(category_id: int, category: CategoryBase, db: Session = Depends(get_db)):\n    db_category = db.query(Category).filter(Category.id == category_id).first()\n    if not db_category:\n        raise HTTPException(status_code=404, detail=\"Category not found\")\n    for attr, value in category.dict().items():\n        setattr(db_category, attr, value)\n    db.commit()\n    db.refresh(db_category)\n    return db_category\n\n\n# Endpoints for Incomes\n@app.get(\"/income/{income_id}\", response_model=Income)\ndef get_income(income_id: int, db: Session = Depends(get_db)):\n    db_income = db.query(Income).filter(Income.id == income_id).first()\n    if not db_income:\n        raise HTTPException(status_code=404, detail=\"Income not found\")\n    return db_income\n\n\n@app.get(\"/incomes\", response_model=List[Income])\ndef get_incomes(db: Session = Depends(get_db)):\n    return db.query(Income).all()\n\n\n@app.post(\"/income\")\ndef create_income(income: IncomeBase, db: Session = Depends(get_db)):\n    db_income = Income(**income.dict())\n    db.add(db_income)\n    db.commit()\n    db.refresh(db_income)\n    return db_income\n\n\n@app.delete(\"/income/{income_id}\")\ndef delete_income(income_id: int, db: Session = Depends(get_db)):\n    db_income = db.query(Income).filter(Income.id == income_id).first()\n    if not db_income:\n        raise HTTPException(status_code=404, detail=\"Income not found\")\n    db.delete(db_income)\n    db.commit()\n    return {\"message\": \"Income deleted successfully\"}\n\n\n@app.patch(\"/income/{income_id}\")\ndef update_income(income_id: int, income: IncomeBase, db: Session = Depends(get_db)):\n    db_income = db.query(Income).filter(Income.id == income_id).first()\n    if not db_income:\n        raise HTTPException(status_code=404, detail=\"Income not found\")\n    for attr, value in income.dict().items():\n        setattr(db_income, attr, value)\n    db.commit()\n    db.refresh(db_income)\n    return db_income\n\n\n# Endpoints for Expense\n@app.get(\"/expense/{expense_id}\", response_model=Expense)\ndef get_expense(expense_id: int, db: Session = Depends(get_db)):\n    db_expense = db.query(Expense).filter(Expense.id == expense_id).first()\n    if not db_expense:\n        raise HTTPException(status_code=404, detail=\"Expense not found\")\n    return db_expense\n\n\n@app.get(\"/expenses\", response_model=List[Expense])\ndef get_expenses(db: Session = Depends(get_db)):\n    return db.query(Expense).all()\n\n\n@app.post(\"/expense\")\ndef create_expense(expense: ExpenseBase, db: Session = Depends(get_db)):\n    db_expense = Expense(**expense.dict())\n    db.add(db_expense)\n    db.commit()\n    db.refresh(db_expense)\n    return db_expense\n\n\n@app.delete(\"/expense/{expense_id}\")\ndef delete_expense(expense_id: int, db: Session = Depends(get_db)):\n    db_expense = db.query(Expense).filter(Expense.id == expense_id).first()\n    if not db_expense:\n        raise HTTPException(status_code=404, detail=\"Expense not found\")\n    db.delete(db_expense)\n    db.commit()\n    return {\"message\": \"Expense deleted successfully\"}\n\n\n@app.patch(\"/expense/{expense_id}\")\ndef update_expense(expense_id: int, expense: ExpenseBase, db: Session = Depends(get_db)):\n    db_expense = db.query(Expense).filter(Expense.id == expense_id).first()\n    if not db_expense:\n        raise HTTPException(status_code=404, detail=\"Expense not found\")\n    for attr, value in expense.dict().items():\n        setattr(db_expense, attr, value)\n    db.commit()\n    db.refresh(db_expense)\n    return db_expense\n\n\n#https://www.figma.com/design/GKc6sROqiDpg0Ht82MzHf1/Finance-Tracker?node-id=0-1&amp;node-type=canvas&amp;t=q1L0quBhVY17c4TW-0\n# \u041d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0447\u0442\u043e\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b \u044d\u0442\u043e \u0443 \u0441\u0435\u0431\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435. \u0441\u043c \u0444\u0438\u0433\u043c\u0443 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d\n@app.get(\"/report/{user_id}\", response_model=dict)\ndef financial_report(user_id: int, db: Session = Depends(get_db)):\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    user = db.query(User).filter(User.id == user_id).first()\n    if not user:\n        return {\"error\": \"User not found\"}\n\n    # \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\n    total_balance = sum(income.amount for income in user.incomes) - sum(expense.amount for expense in user.expenses)\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    user_incomes = [income.dict() for income in user.incomes]\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    user_expenses = [expense.dict() for expense in user.expenses]\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    user_budgets = [budget.dict() for budget in user.budgets]\n\n    return {\n        \"user_id\": user.id,\n        \"total_balance\": total_balance,\n        \"incomes\": user_incomes,\n        \"expenses\": user_expenses,\n        \"budgets\": user_budgets\n    }\n\n\n# Firebase \u043f\u0443\u0448\u0438 \u043d\u0430 \u043c\u043e\u0431\u0438\u043b\u043a\u0443\n@app.get(\"/notifications/{user_id}\", response_model=list)\ndef budget_notifications(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.id == user_id).first()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n    notifications = []\n\n    for budget in user.budgets:\n        total_expenses = sum(expense.amount for expense in budget.category.expenses)\n\n        if total_expenses &gt; budget.amount:\n            notification = {\n                \"budget_id\": budget.id,\n                \"category_name\": budget.category.name,\n                \"total_expenses\": total_expenses,\n                \"budget_amount\": budget.amount\n            }\n            notifications.append(notification)\n\n    return notifications\n</code></pre> <pre><code>from datetime import datetime\nfrom typing import List\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass UserBase(SQLModel):\n    username: str\n    email: str\n    password: str\n\n\nclass User(UserBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    categories: List[\"Category\"] = Relationship(back_populates=\"user\")\n    incomes: List[\"Income\"] = Relationship(back_populates=\"user\")\n    expenses: List[\"Expense\"] = Relationship(back_populates=\"user\")\n    budgets: List[\"Budget\"] = Relationship(back_populates=\"user\")\n\n\nclass CategoryBase(SQLModel):\n    name: str\n    description: str\n    user_id: int = Field(foreign_key=\"user.id\")\n\n\nclass Category(CategoryBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    incomes: List[\"Income\"] = Relationship(back_populates=\"category\")\n    expenses: List[\"Expense\"] = Relationship(back_populates=\"category\")\n    budgets: List[\"Budget\"] = Relationship(back_populates=\"category\")\n    user: User = Relationship(back_populates=\"categories\")\n\n\nclass IncomeBase(SQLModel):\n    amount: float\n    description: str\n    date: datetime = Field(default=datetime.utcnow)\n    user_id: int = Field(foreign_key=\"user.id\")\n    category_id: int = Field(foreign_key=\"category.id\")\n\n\nclass Income(IncomeBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: User = Relationship(back_populates=\"incomes\")\n    category: Category = Relationship(back_populates=\"incomes\")\n\n\nclass ExpenseBase(SQLModel):\n    amount: float\n    description: str\n    date: datetime = Field(default=datetime.utcnow)\n    user_id: int = Field(foreign_key=\"user.id\")\n    category_id: int = Field(foreign_key=\"category.id\")\n\n\nclass Expense(ExpenseBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: User = Relationship(back_populates=\"expenses\")\n    category: Category = Relationship(back_populates=\"expenses\")\n\n\nclass BudgetBase(SQLModel):\n    amount: float\n    date_valid_until: datetime\n    user_id: int = Field(foreign_key=\"user.id\")\n    category_id: int = Field(foreign_key=\"category.id\")\n\n\nclass Budget(BudgetBase, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: User = Relationship(back_populates=\"budgets\")\n    category: Category = Relationship(back_populates=\"budgets\")\n\n</code></pre>"},{"location":"lr1/#_4","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u0430\u043d\u0434\u0440\u043e\u0438\u0434\u0435</p>"},{"location":"lr2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162","text":"<p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:</p> <p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432</p>"},{"location":"lr2/#_1","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lr2/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum(start, end):\n    return sum(range(start, end))\n\n\nasync def worker(start, end, results, index):\n    results[index] = await calculate_sum(start, end)\n\n\nasync def main():\n    num_tasks = 4\n    n = 1000000\n    step = n // num_tasks\n    tasks = []\n    results = [0] * num_tasks\n\n    start_time = time.time()\n    for i in range(num_tasks):\n        start = i * step + 1\n        end = (i + 1) * step + 1\n        task = asyncio.create_task(worker(start, end, results, i))\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n\n    total_sum = sum(results)\n    end_time = time.time()\n    print(f\"Total sum is {total_sum}, computed in {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n</code></pre>"},{"location":"lr2/#multiprocessing","title":"multiprocessing","text":"<pre><code>import multiprocessing\nimport time\n\n\ndef calculate_sum(start, end):\n    return sum(range(start, end))\n\n\ndef worker(start, end, queue):\n    queue.put(calculate_sum(start, end))\n\n\ndef main():\n    num_processes = 4\n    n = 1000000\n    step = n // num_processes\n    processes = []\n    queue = multiprocessing.Queue()\n\n    start_time = time.time()\n    for i in range(num_processes):\n        start = i * step + 1\n        end = (i + 1) * step + 1\n        process = multiprocessing.Process(target=worker, args=(start, end, queue))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    total_sum = sum(queue.get() for _ in range(num_processes))\n    end_time = time.time()\n    print(f\"Total sum is {total_sum}, computed in {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lr2/#threading","title":"threading","text":"<pre><code>import threading\nimport time\n\n\ndef calculate_sum(start, end):\n    return sum(range(start, end))\n\n\ndef worker(start, end, result, index):\n    result[index] = calculate_sum(start, end)\n\n\ndef main():\n    num_threads = 4\n    n = 1000000\n    step = n // num_threads\n    threads = []\n    results = [0] * num_threads\n\n    start_time = time.time()\n    for i in range(num_threads):\n        start = i * step + 1\n        end = (i + 1) * step + 1\n        thread = threading.Thread(target=worker, args=(start, end, results, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    total_sum = sum(results)\n    end_time = time.time()\n    print(f\"Total sum is {total_sum}, computed in {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre>"},{"location":"lr2/#_2","title":"\u041f\u043e \u0438\u0442\u043e\u0433\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:","text":"async multiprocessing threading 0.0084 0.083 0.0085"},{"location":"lr2/#2","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2","text":"<pre><code>import sqlite3\n\n\ndef create_database():\n    conn = sqlite3.connect('personal_finance.db')\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS finance (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT,\n            balance TEXT\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\n\nif __name__ == \"__main__\":\n    create_database()\n\n</code></pre> <pre><code>import re\nimport ssl\n\nimport aiohttp\nimport asyncio\nimport sqlite3\nfrom bs4 import BeautifulSoup\nimport time\n\n\nasync def parse_and_save(url, session, cursor, conn):\n    ssl_context = ssl.create_default_context()\n    ssl_context.check_hostname = False\n    ssl_context.verify_mode = ssl.CERT_NONE\n    async with session.get(url, ssl=ssl_context) as response:\n        text = await response.text()\n        soup = BeautifulSoup(text, 'html.parser')\n\n        billionaires = soup.find_all(\"figcaption\", class_=\"EXdHT\")\n        for billionaire in billionaires:\n            name_tag = billionaire.find(\"h2\", class_=\"jYzxi\")\n            balance_tag = billionaire.find(\"p\", class_=\"ywx5e Q0w8z\")\n\n            if name_tag and balance_tag:\n                name = name_tag.text.strip().split(\" \", 1)[-1]  # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u043c\u044f \u0431\u0435\u0437 \"\u21162\"\n                balance_text = balance_tag.find(\"b\", string=re.compile(r\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435:\\s*\"))\n                if balance_text:\n                    balance = balance_text.next_sibling.strip()\n                else:\n                    balance = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\"\n\n                cursor.execute('INSERT INTO finance (url, name, balance) VALUES (?, ?, ?)', (url, name, balance))\n        conn.commit()\n\n\nasync def worker(urls, cursor, conn):\n    async with aiohttp.ClientSession() as session:\n        tasks = [parse_and_save(url, session, cursor, conn) for url in urls]\n        await asyncio.gather(*tasks)\n\n\nasync def main():\n    urls = [\"https://www.forbes.ru/milliardery/487053-10-bogatejsih-ludej-mira-2023-rejting-forbes\"]\n    num_tasks = 1\n    try:\n        conn = sqlite3.connect('personal_finance.db')\n        cursor = conn.cursor()\n\n        # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0430\n        cursor.execute('''\n            CREATE TABLE IF NOT EXISTS finance (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                url TEXT,\n                name TEXT,\n                balance TEXT\n            )\n        ''')\n        conn.commit()\n\n        start_time = time.time()\n\n        tasks = []\n        for i in range(num_tasks):\n            task = asyncio.create_task(worker(urls[i::num_tasks], cursor, conn))\n            tasks.append(task)\n\n        await asyncio.gather(*tasks)\n\n        conn.close()\n        end_time = time.time()\n        print(f\"Parsed and saved data in {end_time - start_time} seconds\")\n    except sqlite3.Error as e:\n        print(f\"SQLite error: {e}\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n</code></pre> <pre><code>import multiprocessing\nimport re\n\nimport requests\nimport sqlite3\nfrom bs4 import BeautifulSoup\nimport time\n\n\ndef parse_and_save(url, queue):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    billionaires = soup.find_all(\"figcaption\", class_=\"EXdHT\")\n    for billionaire in billionaires:\n        name_tag = billionaire.find(\"h2\", class_=\"jYzxi\")\n        balance_tag = billionaire.find(\"p\", class_=\"ywx5e Q0w8z\")\n\n        if name_tag and balance_tag:\n            name = name_tag.text.strip().split(\" \", 1)[-1]  # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u043c\u044f \u0431\u0435\u0437 \"\u21162\"\n            balance_text = balance_tag.find(\"b\", string=re.compile(r\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435:\\s*\"))\n            if balance_text:\n                balance = balance_text.next_sibling.strip()\n            else:\n                balance = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\"\n\n            queue.put((url, name, balance))\n\n\ndef worker(urls, queue):\n    for url in urls:\n        parse_and_save(url, queue)\n\n\ndef main():\n    urls = [\"https://www.forbes.ru/milliardery/487053-10-bogatejsih-ludej-mira-2023-rejting-forbes\"]\n    num_processes = 3\n    queue = multiprocessing.Queue()\n    processes = []\n    conn = sqlite3.connect('personal_finance.db')\n    cursor = conn.cursor()\n\n    start_time = time.time()\n\n    for i in range(num_processes):\n        process = multiprocessing.Process(target=worker, args=(urls[i::num_processes], queue))\n        processes.append(process)\n        process.start()\n\n    for process in processes:\n        process.join()\n\n    while not queue.empty():\n        url, name, balance = queue.get()\n        cursor.execute('INSERT INTO finance (url, name, balance) VALUES (?, ?, ?)', (url, name, balance))\n\n    conn.commit()\n    conn.close()\n    end_time = time.time()\n    print(f\"Parsed and saved data in {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre> <pre><code>import threading\nimport requests\nimport sqlite3\nfrom bs4 import BeautifulSoup\nimport re\nimport time\n\n\ndef parse_and_save(url, cursor, conn):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    billionaires = soup.find_all(\"figcaption\", class_=\"EXdHT\")\n    for billionaire in billionaires:\n        name_tag = billionaire.find(\"h2\", class_=\"jYzxi\")\n        balance_tag = billionaire.find(\"p\", class_=\"ywx5e Q0w8z\")\n\n        if name_tag and balance_tag:\n            name = name_tag.text.strip().split(\" \", 1)[-1]  # \u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0438\u043c\u044f \u0431\u0435\u0437 \"\u21162\"\n            balance_text = balance_tag.find(\"b\", string=re.compile(r\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435:\\s*\"))\n            if balance_text:\n                balance = balance_text.next_sibling.strip()\n            else:\n                balance = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\"\n\n            cursor.execute('INSERT INTO finance (url, name, balance) VALUES (?, ?, ?)', (url, name, balance))\n    conn.commit()\n\n\ndef worker(urls):\n    conn = sqlite3.connect('personal_finance.db')\n    cursor = conn.cursor()\n    for url in urls:\n        parse_and_save(url, cursor, conn)\n    conn.close()\n\n\ndef main():\n    urls = [\"https://www.forbes.ru/milliardery/487053-10-bogatejsih-ludej-mira-2023-rejting-forbes\"]\n    num_threads = 3\n\n    conn = sqlite3.connect('personal_finance.db')\n    cursor = conn.cursor()\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0430\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS finance (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            url TEXT,\n            name TEXT,\n            balance TEXT\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\n    threads = []\n    start_time = time.time()\n\n    for i in range(num_threads):\n        thread = threading.Thread(target=worker, args=(urls[i::num_threads],))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    end_time = time.time()\n    print(f\"Parsed and saved data in {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre>"},{"location":"lr2/#_3","title":"\u041f\u043e \u0438\u0442\u043e\u0433\u0443 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:","text":"async multiprocessing threading 0.851 1.029 0.805"},{"location":"lr2/#_4","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<p>\u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043b, \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0441\u0430\u0439\u0442. \u0421\u0440\u0430\u0432\u043d\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lr3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163","text":""},{"location":"lr3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0438 1 \u0438 2 - \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438 - 70% \u0431\u0430\u043b\u043b\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0438 1, 2 \u0438 3 - 100% \u0431\u0430\u043b\u043b\u043e\u0432.</p>"},{"location":"lr3/#1-fastapi-docker","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker","text":"<p>Docker \u2014 \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0439 Docker, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435. Docker \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: [\u041e\u0441\u043d\u043e\u0432\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Docker](https://tproger.ru/translations/docker-for-beginners/.</p> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1</p> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1</p> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2</p> <p>\u0420\u0435\u0443\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438.</p>"},{"location":"lr3/#2-fastapi","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI","text":"<p>** \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430**: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u0432\u0430\u0448\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 API. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438: \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f FastAPI \u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 Celery \u0438 Redis:</p> <p>Celery \u2014 \u044d\u0442\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0444\u043e\u043d\u0435. Redis \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0431\u0440\u043e\u043a\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0445\u0440\u0430\u043d\u044f\u0449\u0438\u0439 \u0437\u0430\u0434\u0430\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b. \u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0432 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Redis, \u0438 Celery-\u0432\u043e\u0440\u043a\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0432 \u0444\u043e\u043d\u0435.</p> <pre><code>import re\nimport aiohttp\nimport asyncio\nfrom bs4 import BeautifulSoup\nimport time\nfrom databases import Database\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\nDATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@localhost/personal_finance_web_lab')\n\n\nasync def parse_and_save(url, session, database):\n    async with session.get(url) as response:\n        text = await response.text()\n        soup = BeautifulSoup(text, 'html.parser')\n\n        billionaires = soup.find_all(\"figcaption\", class_=\"EXdHT\")\n\n        for billionaire in billionaires:\n            name_tag = billionaire.find(\"h2\", class_=\"jYzxi\")\n            balance_tag = billionaire.find(\"p\", class_=\"ywx5e Q0w8z\")\n\n            if name_tag and balance_tag:\n                name = name_tag.text.strip().split(\" \", 1)[-1]\n                balance_text = balance_tag.find(\"b\", string=re.compile(r\"\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435:\\s*\"))\n\n                if balance_text:\n                    balance = balance_text.next_sibling.strip()\n                else:\n                    balance = balance_tag.find(\"b\", string=re.compile(r\"\u0414\u043e\u0445\u043e\u0434:\\\u0441*\")).next_sibling.strip()\n\n                query = 'INSERT INTO finance (url, name, balance) VALUES (:url, :name, :balance)'\n                values = {\"url\": url, \"name\": name, \"balance\": balance}\n                await database.execute(query=query, values=values)\n\n\nasync def worker(urls, database):\n    async with aiohttp.ClientSession() as session:\n        tasks = [parse_and_save(url, session, database) for url in urls]\n        await asyncio.gather(*tasks)\n\n\nasync def main_start():\n    urls = [\"https://www.forbes.ru/milliardery/487053-10-bogatejsih-ludej-mira-2023-rejting-forbes\",\n            \"https://www.forbes.ru/forbeslife/475277-samye-vysokooplacivaemye-tennisisty-mira-2022\"]\n    num_tasks = 1\n    database = Database(DATABASE_URL)\n\n    try:\n        await database.connect()\n        await database.execute('''\n            CREATE TABLE IF NOT EXISTS finance (\n                id SERIAL PRIMARY KEY,\n                url TEXT,\n                name TEXT,\n                balance TEXT\n            )\n        ''')\n\n        start_time = time.time()\n\n        tasks = [asyncio.create_task(worker(urls[i::num_tasks], database)) for i in range(num_tasks)]\n        await asyncio.gather(*tasks)\n\n        await database.disconnect()\n        end_time = time.time()\n        return f\"Parsed and saved data in {end_time - start_time} seconds\"\n    except Exception as e:\n        return f\"Unexpected error: {e}\"\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main_start())\n\n</code></pre> <pre><code>from celery import Celery\nimport asyncio\nfrom parser import main_start\n\napp = Celery('tasks', broker='redis://redis:6379/0', backend='redis://redis:6379/0')\n\n@app.task\ndef parse_urls():\n    asyncio.run(main_start())\n\n</code></pre> <pre><code>broker_url = 'redis://redis:6379/0'\nresult_backend = 'redis://redis:6379/0'\n\n</code></pre> <pre><code># main.py\nfrom fastapi import FastAPI, BackgroundTasks\nfrom celery_worker import parse_urls\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()  # \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u0437 .env\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n@app.get(\"/parse\")\nasync def start_parsing(background_tasks: BackgroundTasks):\n    task = parse_urls.delay()\n    return {\"task_id\": task.id, \"status\": \"started\"}\n\n</code></pre> <pre><code>fastapi\naiohttp\nbeautifulsoup4\ndatabases\nasyncpg\ncelery\nredis\nuvicorn\npython-dotenv\n\n</code></pre> <pre><code>services:\n  database:\n    image: postgres:latest\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: personal_finance_web_lab\n\n\n  fastapi:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8000:80\"\n    depends_on:\n      - database\n      - redis\n    environment:\n      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/personal_finance_web_lab\n\n  parser:\n    build:\n      context: .\n      dockerfile: DockerfileParser\n    depends_on:\n      - database\n      - redis\n    environment:\n      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/personal_finance_web_lab\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n\n  celery_worker:\n    build:\n      context: .\n      dockerfile: DockerfileParser\n    command: celery -A celery_worker worker --loglevel=info\n    depends_on:\n      - database\n      - redis\n    environment:\n      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/personal_finance_web_lab\n      - CELERY_BROKER_URL=redis://redis:6379/0\n      - CELERY_RESULT_BACKEND=redis://redis:6379/0\n\nvolumes:\n  postgres_data:\n</code></pre> <pre><code>FROM python:3.12\n\nWORKDIR /app\n\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCOPY .env .env\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n\n</code></pre>"},{"location":"lr3/#_2","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u041d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0442\u044c dockerfile, \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441 \u043e\u0447\u0435\u0440\u0435\u0434\u044c\u044e celery</p>"}]}